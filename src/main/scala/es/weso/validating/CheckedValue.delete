package es.weso.validating
import cats._
import ConstraintReason._


object CheckedValue {
  type A
  type R

  case class Checked_[A,R](value: Checked[ConstraintReason[A],R,ConstraintError[A]])

  implicit val checkedValueCheckV = new CheckedV[A,R] {

  /**
    * Simple OK value
    */
   def okSingle(x: A, r: R, msg: String = ""): CheckedV[A,R] = {
     ??? // Checked_(Constraint.okSingle(x, r, msg)) 
   }
  
  /**
   * Simple OK value with several responses
   */
  def okSingleND(x: A, rs: Seq[R], msg: String = ""): CheckedV[A,R] = {
    ??? // Checked_(Constraint.okSingle(x,rs,msg))
  }
  
  /**
   * Error 
   */
  def errString[A:Monoid,R:Monoid](msg: String): CheckedV[A,R] = {
    ??? // Checked_(Constraint.errString(Monoid[A].empty, msg))
  }
  
  /**
   * Error 
   */
  def errValue[A:Monoid,R:Monoid](x:A, msg: String): CheckedV[A,R] = {
    ??? // Checked_(Constraint.errString(x, s"Error on value $x: $msg"))
  }
  
  def cond[A, R](c: A => Boolean, r: R, msg: String): A => CheckedV[A,R] = x => {
    ??? // Checked_(Constraint.cond(c,r,msg)(x))
  }
    
  def checkSome[A, R: Monoid](
      x: A,
      conds: Seq[A => CheckedV[A,R]],
      shortCircuit: Boolean = true): CheckedV[A, R] = {
    ??? // CheckedValue(Constraint.checkSome(x,conds,shortCircuit))
  }
  
  def checkAll[A, R: Monoid](
      x: A,
      conds: Seq[A => CheckedV[A,R]],
      shortCircuit: Boolean = true): CheckedV[A, R] = {
    ???
    // CheckedValue(Constraint.checkAll(x,conds,shortCircuit))
  }
  
  def not[A, R: Monoid](v: CheckedV[A, R]): CheckedV[A, R] = {
    ??? // CheckedValue(Constraint.not(v))
  }
  def and[A, R: Monoid](v1: CheckedV[A, R],v2: CheckedV[A, R]): CheckedV[A, R] =
    ???
  def or[A, R: Monoid](v1: CheckedV[A, R],v2: CheckedV[A, R]): CheckedV[A, R] =
    ???
  def xor[A, R: Monoid](v1: CheckedV[A, R],v2: CheckedV[A, R]): CheckedV[A, R] =
    ???
  def all[A, R: Monoid](vs: Seq[CheckedV[A, R]], shortcircuit: Boolean = true): CheckedV[A, R] =
    ???
  def some[A, R: Monoid](vs: Seq[CheckedV[A, R]], shortcircuit: Boolean = true): CheckedV[A, R] =
    ???
  def oneOf[A, R: Monoid](vs: Seq[CheckedV[A, R]]): CheckedV[A, R] = 
    ???
  }   
 
}